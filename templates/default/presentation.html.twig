{% extends 'reveal.html.twig' %}

{% block body %}
    {{ include(presentation_slides) }}
{% endblock %}

{% block javascripts %}

    <script src="{{ asset('reveal/lib/js/head.min.js') }}"></script>
    <script src="{{ asset('reveal/js/reveal.js') }}"></script>
    <script src="{{ asset('js/socket.io.js') }}"></script>
    <script type="application/javascript">
        (function(d){
            function ajax(method, url, params, callback) {
                const request = new XMLHttpRequest();

                request.open(method, url, true);

                request.onload = function() {
                    if (this.status >= 200 && this.status < 400) {
                        if (typeof callback === 'function') {
                            callback.apply(this, [this.response]);
                        }
                    } else {
                        console.error(this);
                        throw 'The server returned an error after an AJAX request.';
                    }
                };

                request.onerror = function() {
                    console.error(this);
                    throw 'An error occured in an AJAX request.';
                };

                request.send(params);
            }

            var autoSlide = 10000;
            var internalTimer = autoSlide;
            var timerStartedAt = Date.now();
            var amount = 0;
            var pause = false;

            Reveal.initialize({
                width: "100%",
                height: "100%",
                margin: 0,
                minScale: 1,
                maxScale: 1,
                controls: true,
                progress: true,
                history: true,
                center: true,
                autoSlide: autoSlide,
                autoSlideMethod: checkNext,
                overview: false,
                transition: 'slide', // none/fade/slide/convex/concave/zoom
                dependencies: [
                    { src: '{{ asset('reveal/lib/js/classList.js') }}', condition: function() { return !document.body.classList; } },
                    { src: '{{ asset('reveal/plugin/markdown/marked.js') }}', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '{{ asset('reveal/plugin/markdown/markdown.js') }}', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '{{ asset('reveal/plugin/highlight/highlight.js') }}', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                    { src: '{{ asset('reveal/plugin/search/search.js') }}', async: true },
                    { src: '{{ asset('reveal/plugin/zoom-js/zoom.js') }}', async: true },
                    { src: '{{ asset('reveal/plugin/notes/notes.js') }}', async: true }
                ]
            });

            Reveal.addEventListener('slidechanged', function (event) {
                ajax('POST', '{{ path('update_session_slide') }}', event.currentSlide.id);
                internalTimer = autoSlide;
                timerStartedAt = Date.now();
            });
            setInterval(function(){
                {#
                ajax('GET', '{{ path('check_session_slide') }}', '', function(response){
                    timerStartedAt = parseInt(timerStartedAt, 10);
                    amount = (-1) * parseInt(response, 10);
                    console.info(amount);
                });
                #}
            }, 500);
            setInterval(function(){
                if (pause) {
                    return;
                }
                internalTimer -= 100;
                if (internalTimer <= amount) {
                    Reveal.navigateNext();
                    internalTimer = autoSlide;
                }
            }, 100);

            function checkNext() {
                console.info('checking next', internalTimer, amount);
                if (internalTimer <= amount) {
                    Reveal.navigateNext();
                    internalTimer = autoSlide;
                }
            }

            d.addEventListener('keydown', function(event){
                if (event.keyCode === 65) {
                    // key "a"
                    pause = !pause;
                    console.info(pause ? 'Pause !' : 'Reprise');
                }
            });

            var socket = io.connect(window.location.protocol+'//'+window.location.hostname+':9998');
            socket.emit('subscribe', function(res){
                console.info(arguments);
            });
            socket.on('message', function(msg) {
                console.info(msg);
            });
        })(document);
    </script>
{% endblock %}
